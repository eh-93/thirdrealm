datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Network {
  ethereum
  polygon
}

model Collection {
  name            String
  description     String
  coverImage      String
  contractAddress String
  network         Network
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  space           Space?
  owners          CollectionOwner[]

  // @@unique([contractAddress, network])
  @@id([contractAddress, network])
}

model CollectionOwner {
  ownerAddress    String
  updatedAt       DateTime   @default(now())
  collection      Collection @relation(fields: [contractAddress, network], references: [contractAddress, network])
  contractAddress String
  network         Network

  @@id([contractAddress, ownerAddress, network])
}

model Wallet {
  address     String                  @id
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now())
  lastSeen    DateTime                @updatedAt
  memberships WalletSpaceMembership[]
  posts       Post[]
  comments    Comment[]
}

// Public spaces are 1:1 with collections - open, no moderation, free tier basically
model Space {
  id              String                  @id @default(cuid())
  collection      Collection              @relation(fields: [contractAddress, network], references: [contractAddress, network])
  contractAddress String
  network         Network
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now())
  members         WalletSpaceMembership[]
  posts           Post[]

  @@unique([contractAddress, network])
}

// Private spaces allow for moderation, multicollection ownership and more

model WalletSpaceMembership {
  wallet        Wallet   @relation(fields: [walletAddress], references: [address])
  walletAddress String
  space         Space    @relation(fields: [spaceId], references: [id])
  spaceId       String
  createdAt     DateTime @default(now())

  @@id([walletAddress, spaceId])
}

model Post {
  id            String    @id @default(cuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  author        Wallet    @relation(fields: [authorAddress], references: [address])
  authorAddress String
  space         Space     @relation(fields: [spaceId], references: [id])
  spaceId       String
  comments      Comment[]

  @@index([spaceId])
  @@index([createdAt])
}

model Comment {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  author        Wallet   @relation(fields: [authorAddress], references: [address])
  authorAddress String
  post          Post     @relation(fields: [postId], references: [id])
  postId        String
  parentId      String?  @unique
  parent        Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  child         Comment? @relation("CommentReplies")

  @@index([postId])
  @@index([createdAt])
  @@index([authorAddress])
}
