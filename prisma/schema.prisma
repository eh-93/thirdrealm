datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Network {
  ethereum
  polygon
}

model Collection {
  contractAddress String
  network         Network
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @default(now())
  rules           CommunityCollectionRules[]
  owners          CollectionOwner[]

  @@id([contractAddress, network])
}

model CollectionOwner {
  ownerAddress    String
  updatedAt       DateTime   @default(now())
  collection      Collection @relation(fields: [contractAddress, network], references: [contractAddress, network], onDelete: Cascade)
  contractAddress String
  network         Network

  @@id([contractAddress, ownerAddress, network])
}

model Wallet {
  address     String                      @id
  createdAt   DateTime                    @default(now())
  updatedAt   DateTime                    @default(now())
  lastSeen    DateTime                    @updatedAt
  memberships WalletCommunityMembership[]
  posts       Post[]
  comments    Comment[]
}

model CommunityCollectionRules {
  communityId     String
  contractAddress String
  network         Network
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  community       Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  collection      Collection @relation(fields: [contractAddress, network], references: [contractAddress, network], onDelete: Cascade)

  @@id([communityId, contractAddress, network])
}

model Community {
  id          String                      @id @default(cuid())
  name        String
  description String
  coverImage  String
  rules       CommunityCollectionRules[]
  createdAt   DateTime                    @default(now())
  updatedAt   DateTime                    @default(now())
  members     WalletCommunityMembership[]
  posts       Post[]
}

model WalletCommunityMembership {
  wallet        Wallet    @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  community     Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId   String
  createdAt     DateTime  @default(now())

  @@id([walletAddress, communityId])
}

model Post {
  id            String    @id @default(cuid())
  // title         String
  content       Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  author        Wallet    @relation(fields: [authorAddress], references: [address], onDelete: Cascade)
  authorAddress String
  community     Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId   String
  comments      Comment[]

  @@index([communityId])
  @@index([createdAt])
}

model Comment {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  author        Wallet   @relation(fields: [authorAddress], references: [address], onDelete: Cascade)
  authorAddress String
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  parentId      String?  @unique
  parent        Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  child         Comment? @relation("CommentReplies")

  @@index([postId])
  @@index([createdAt])
  @@index([authorAddress])
}
